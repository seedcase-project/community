---
title: "A brief introduction to functional programming"
description: |
  Functional programming is a programming style. This
  short introduces the basics of functional programming, its advantages,
  and how it differs from more imperative programming (like Object Oriented Programming).
author: "Kris Beicher"
date: "19-03-2025"
# date-modified: ""
categories: 
  - python
  - functional programming
---

## Motivation for this micro-lesson

-   This lesson aims to introduce the basics of functional programming to
    those who are new to programming or have only worked with imperative
    programming languages. We will cover the basics of functional
    programming, its advantages, and how it differs from Object Oriented Programming.

## Assumed knowledge of reader

-   Basic programming knowledge
-   Basic Python knowledge
-   Basic understanding of how functions work

## Necessary software

-   Python editor of choice

## Learning goal

The goal with this learning short is for the reader to understand the basics of functional programming and how it differs from imperative programming. And to be able to answer the following questions:

- What is an immutable data structure?
- What is a side effect in programming?
- What is a pure function?
- What is a higher-order function?
- How can I use Filter, Map, and Reduce in Python?
- What does the lambda keyword do in Python?
- What is list comprehension in Python?

## Take home messages

- Functional programming is a programming paradigm that mainly relies on the concept of immutable data and mathematical functions to perform computation thus trying to avoid side effects.

## Lesson content

### What is an immutable data structure?

An immutable data structure is a data structure that cannot be changed after it is created. In Python, tuples are an example of an immutable data structure. Once a tuple is created, it cannot be changed. This is in contrast to lists, which are mutable. In the context of functional programming, keeping data structures immutable is preferred because they help avoid side effects. The code written should strive to avoid changing the data it is working with. Instead, it should create new data structures based on the existing ones. This makes the code easier to reason about and less prone to bugs.

### What is a side effect in programming?

A side effect is any change in the state of the system that is observable outside the called function other than the return value. This can include modifying a variable outside the function, printing to the console, or modifying a data structure. Side effects can make code harder to understand, as they introduce hidden dependencies and make it difficult to predict the behavior of the code. Functional programming aims to minimize side effects by using immutable data structures and pure functions.

### What is a pure function?

A pure function is a fundamental concept in functional programming, it is basically a function that has no side effects and always returns the same output for the same input. This means that a the ideal pure function does not modify any external state and does not depend on any external state. Truly pure functions are easier to test, reason about, and parallelize, as they do not have hidden dependencies or side effects. They are also easier to reuse, as they can be called with the same arguments and will always return the same result. 

### What is a higher-order function?

A higher-order function is a function which will take one or more existing functions as arguments, and/or a function which returns a new function as its result. Higher-order functions are a powerful concept in functional programming. Examples of higher-order functions in Python include `map`, `filter`, and `reduce`.

### How can I use Filter, Map, and Reduce in Python?

-   `filter` is a built-in function in Python that takes a function and an iterable as arguments and returns an iterator over the elements of the iterable for which the function returns `True`.

    **Syntax:**
    ```python
    filter(function, iterable)
    ```
    The `function` should return `True` or `False` for each element in `iterable`. Only elements for which `function` returns `True` are included in the output.
    
    For example:
    
    ```python
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
    print(even_numbers)
    ```

    In the example above, the `filter` function is used to filter out the even numbers from the list of numbers. The lambda function is used to define the condition for filtering, in this case, checking if the number produces a remainder of 0 when divided by 2. The `filter` function on its own returns what is called an iterator, so in order for us to see the result, we need to convert it to a list. We do the same below with the `map` function.

-   `map` is a built-in function in Python that takes a function and an iterable as arguments and returns an iterator over the results of applying the function to the elements of the iterable.

    **Syntax:**
    ```python
    map(function, iterable)
    ```
    The `function` is applied to each element of `iterable`, and the results are returned as an iterator.
    
    For example:
    
    ```python
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    squared_numbers = list(map(lambda x: x ** 2, numbers))
    print(squared_numbers)
    ```

    In this example, the `map` function is used to square each number in the list of numbers. The lambda function is used to define the operation to be applied to each element of the list, in this case by squaring it. The `map` function returns an iterator, so we convert it to a list to see the result.

-  `reduce` is a function in the `functools` module in Python that takes a function and an iterable as arguments and returns a single value by applying the function cumulatively to the elements of the iterable.

    **Syntax:**
    ```python
    reduce(function, iterable)
    ```
    The `function` takes two arguments and is applied cumulatively to the elements of `iterable` to reduce them to a single value.
    
    It is slightly different from the first two functions in that it isn't built into Python but is available in the `functools` module.
    
    For example:
    
    ```python
    from functools import reduce
    numbers = [1, 2, 3, 4, 5]
    sum_of_numbers = reduce(lambda x, y: x + y, numbers)
    print(sum_of_numbers)
    ```

    In this final example, the `reduce` function is used to calculate the sum of the numbers in the list. The lambda function defines how the elements of the list should be combined, in this case by adding them together. As the `reduce` function returns a single value, we can print it directly.

### What does the lambda keyword do in Python?

The `lambda` keyword in Python is used to create what is called anonymous functions (i.e. not named, and therefore bound to the place where they are defined). In functional programming, the `lambda` function is often used to define simple functions that are used only once.

**Syntax:**
```python
lambda arguments: expression
```   
A `lambda` function can take any number of arguments but must have only a single expression, which is evaluated and returned.

In the `filter` example above, the lambda function (`lambda x: x % 2 == 0`) is used to define the condition for filtering the list of numbers. The argument `x` represents each element of the list, and the expression `x % 2 == 0` checks if the element is even. The lambda function used in the `map` example (`lambda x: x ** 2`) is used in much the same way, with a single argument and a simple expression.

In the `reduce` example, the lambda function (`lambda x, y: x + y`) takes two arguments and returns their sum. The first argument represents the accumulated value, and the second argument represents the next element of the list. The lambda function is applied to each pair of elements in the list until a single value is returned.

### What is list comprehension in Python?

The final concept we will cover is list comprehension, which is a concise way to create lists in Python. List comprehension allows you to create a new list by applying an expression to each element of an existing list.

**Syntax:**
```python
[expression for item in iterable]
```
An optional `if` condition can be added:
```python
[expression for item in iterable if condition]
```

For example:

```python
numbers = [1, 2, 3, 4, 5]
squared_numbers = [x ** 2 for x in numbers]
print(squared_numbers)
```

In this example, the list comprehension `[x ** 2 for x in numbers]` is used to create a new list of squared numbers from the list of numbers. The expression `x ** 2` is applied to each element of the list, and the resulting list is stored in the variable `squared_numbers`.

## Summary

- BRIEF SUMMARY

## Additional resources

-   [Functional Programming in Python (Codecademy)](https://www.codecademy.com/article/functional-programming-in-python)
-   [Functional Programming Cheatsheet (Codecademy)](https://www.codecademy.com/learn/learn-advanced-python/modules/functional-programming/cheatsheet)
-   [Functional Programming in Python - online course (RealPython)](https://realpython.com/courses/functional-programming-python/)
